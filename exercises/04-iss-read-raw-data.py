'''
    Exercise 4:
        This exercise involves more mathematics and numeric calculations.

        1. find a way to read the files in data/iss_sample_data into an array
            (hint: a quick way for this case is np.loadtxt)
            this should be a 4 dimensional array


        2. Preprocessing the "an_" files
            The files that begin with "an_" have the following format:

            time_s (s)   time_ns (ns) index      adc
            1523983495 958908728 1158174721 0x03c3b300

            a. convert the times
                create an array where you sum the two time columns as one time:
                times = time_s + 1e-9*time_ns
                (1e-9 means 10^(-9). 10^(-9) seconds is one nano second)
            b. convert the counts
                use the function adcs2counts below
            c. Create a new table with
                time counts

        3. Preprocessing the en_ file:
            This file has the format:
            time_s (s) time_ns (s) encoder index di
            1523983495 724201360 -3305489 578560 00

            a. convert the time to total time
            b. convert the encoder value using this function with these
                arguments:
                encoder2energy(encoder, pulses_per_deg=36000,
                               offset=0.09833571377062045)
            c. create a new table with the columns:
                time, energy


        4. Each file is linked to a device which is summarized in:
            data/iss_sample_data/filenames.txt
            for example:
                an_82ec23: pba2_adc6
            means that the filename "an_82ec23" was generated by device named
                "pba2_adc6"

            Finally, each device is set to measure a certain quantity,
            summarized in  data/iss_sample_data/devnames.txt, for ex:
                pba1_adc7: i0
            means that the device "pba1_adc7" was currently measuring 'i0'

            Create a dictionary where each key in the dictionary is the name of
            the quantity measured by each device.
            Bonus: Try to do this by reading the files devnames.txt
                rather than by hand. (But don't worry if it's too tedious)

'''

def time2totaltime(time_s, time_ns):
    return time_s + time_ns*1e-9

def adcs2counts(adcs):
    ''' Convert adcs to counts
    '''
    # allocate array of zeroes
    counts = np.zeros(len(adcs))

    # go through each adc
    for i in range(len(adcs)):
        adc = adcs[i]
        shifted_adc = adc >> 8
        if shifted_adc > 0x1FFFF:
            count = (shifted_adc) - 0x40000
        else:
            count = (shifted_adc)*7.62939453125e-05

    return counts


def encoder2energy(encoder, pulses_per_deg=36000, offset = 0):
    """
    Convert from encoder counts to energy in eV

    Parameters
    ----------
    encoder : float or np.array()
        Encoder counts to convert
    pulses_per_deg: float
        Number of pulses per degree of the encoder
    offset : float
        Offset in degrees to adjust the conversion

    Returns
    -------
    out : float or np.array()
        Energy value or array of values

    See Also
    --------
    :func:`isstools.conversions.xray.energy2encoder`
    """
    return -12400 / (2 * 3.1356 * np.sin(np.deg2rad((encoder/pulses_per_deg) - float(offset))))

